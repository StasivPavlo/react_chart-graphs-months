{"version":3,"sources":["components/InputsChart/InputsChart.tsx","components/MonthChart/MonthChart.tsx","components/RadioButtonsChart/RadioButtonsChart.tsx","App.tsx","index.tsx"],"names":["InputsChart","React","memo","onValueMonth","onLabelMonth","useState","labelMonth","setLabelMonths","valueMonth","setValueMonths","valueMonthDirty","setValueMonthsDirty","valueMonthError","setValueMonthsError","labelMonthDirty","setLableMonthsDirty","labelMonthError","setLableMonthsError","submitLable","submitValue","className","onSubmit","event","preventDefault","htmlFor","type","id","classNames","name","placeholder","value","onBlur","onChange","label","target","trim","length","test","hidden","ChartJS","register","CategoryScale","LinearScale","RadialLinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","MonthChart","labels","values","typeChart","chartData","datasets","data","borderColor","backgroundColor","height","RadioButtonsChart","onTypeChart","checked","App","labelMonths","valueMonths","setTypeChart","addLabelMonth","useCallback","months","split","map","month","addValueMonth","Number","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.210c2444.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './InputsChart.scss';\n\ninterface Props {\n  onValueMonth: (value: string) => void;\n  onLabelMonth: (value: string) => void;\n}\n\nexport const InputsChart = React.memo<Props>(({ onValueMonth, onLabelMonth }) => {\n  const [labelMonth, setLabelMonths] = useState('');\n  const [valueMonth, setValueMonths] = useState('');\n  const [valueMonthDirty, setValueMonthsDirty] = useState(false);\n  const [valueMonthError, setValueMonthsError] = useState(false);\n  const [labelMonthDirty, setLableMonthsDirty] = useState(false);\n  const [labelMonthError, setLableMonthsError] = useState(false);\n\n  const changeLabelMonth = (label: string) => {\n    setLableMonthsDirty(false);\n    setLableMonthsError(false);\n    setLabelMonths(label);\n\n    if (label.trim().length === 0) {\n      setLableMonthsError(true);\n    }\n  };\n\n  const changeValueMonth = (value: string) => {\n    setValueMonthsDirty(false);\n    setValueMonthsError(false);\n    setValueMonths(value);\n\n    const regExp = /^[ -,0-9]+$/;\n\n    if (!regExp.test(value)) {\n      setValueMonthsError(true);\n    }\n  };\n\n  const submitLable = () => {\n    setLableMonthsDirty(true);\n    if (!labelMonthError) {\n      onLabelMonth(labelMonth);\n    }\n  };\n\n  const submitValue = () => {\n    setValueMonthsDirty(true);\n    if (!valueMonthError) {\n      onValueMonth(valueMonth);\n    }\n  };\n\n  return (\n    <form\n      className=\"chart__inputs\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        submitLable();\n        submitValue();\n      }}\n    >\n      <label htmlFor=\"inputLabelX\">\n        X axis labels:\n        <input\n          type=\"text\"\n          id=\"inputLabelX\"\n          className={classNames('input', { 'input--error': labelMonthError })}\n          name=\"inputLabelX\"\n          placeholder=\"September, November...\"\n          value={labelMonth}\n          onBlur={submitLable}\n          onChange={(event) => changeLabelMonth(event.target.value)}\n        />\n\n        {labelMonthDirty && labelMonthError && (\n          <span className=\"input__message-error\">Please input correctly</span>\n        )}\n      </label>\n\n      <label htmlFor=\"inputValueY\">\n        Y axis values:\n        <input\n          type=\"text\"\n          id=\"inputValueY\"\n          className={classNames('input', { 'input--error': valueMonthError })}\n          name=\"inputValueY\"\n          placeholder=\"1, 2, 3...\"\n          value={valueMonth}\n          onBlur={submitValue}\n          onChange={(event) => changeValueMonth(event.target.value)}\n        />\n\n        {valueMonthDirty && valueMonthError && (\n          <span className=\"input__message-error\">Please input correctly</span>\n        )}\n      </label>\n\n      <button hidden type=\"submit\">Submit</button>\n    </form>\n  );\n});\n","import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  RadialLinearScale,\n} from 'chart.js';\nimport { Bar, Line, Radar } from 'react-chartjs-2';\nimport './MonthChart.scss';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n);\n\ninterface Props {\n  labels: string[];\n  values: number[];\n  typeChart: string;\n}\n\nexport const MonthChart = React.memo<Props>(({ labels, values, typeChart }) => {\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'months',\n        data: values,\n        borderColor: 'rgba(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.4)',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"chart__graph\">\n      {typeChart === 'line' && <Line height={120} data={chartData} />}\n\n      {typeChart === 'bar' && <Bar height={120} data={chartData} />}\n\n      {typeChart === 'radar' && <Radar height={120} data={chartData} />}\n    </div>\n  );\n});\n","import React from 'react';\nimport './RadioButtonsChart.scss';\n\ninterface Props {\n  onTypeChart: (value: string) => void;\n  typeChart: string;\n}\n\nexport const RadioButtonsChart = React.memo<Props>(({\n  onTypeChart,\n  typeChart,\n}) => {\n  return (\n    <div className=\"chart__radio-buttons\">\n      <label htmlFor=\"BarChart\">\n        Bar chart\n        <input\n          type=\"radio\"\n          name=\"chart-bar\"\n          id=\"BarChart\"\n          value=\"bar\"\n          checked={typeChart === 'bar'}\n          onChange={(event) => onTypeChart(event.target.value)}\n        />\n      </label>\n\n      <label htmlFor=\"LineChart\">\n        Line chart\n        <input\n          type=\"radio\"\n          name=\"chart-bar\"\n          id=\"LineChart\"\n          value=\"line\"\n          checked={typeChart === 'line'}\n          onChange={(event) => onTypeChart(event.target.value)}\n        />\n      </label>\n\n      <label htmlFor=\"RadarChart\">\n        Radar chart\n        <input\n          type=\"radio\"\n          name=\"chart-bar\"\n          id=\"RadarChart\"\n          value=\"radar\"\n          checked={typeChart === 'radar'}\n          onChange={(event) => onTypeChart(event.target.value)}\n        />\n      </label>\n    </div>\n  );\n});\n","import React, { useCallback, useState } from 'react';\r\nimport { InputsChart } from './components/InputsChart';\r\nimport { MonthChart } from './components/MonthChart';\r\nimport { RadioButtonsChart } from './components/RadioButtonsChart';\r\nimport './App.scss';\r\n\r\nexport const App: React.FC = () => {\r\n  const [labelMonths, setLabelMonths] = useState<string[]>([]);\r\n  const [valueMonths, setValueMonths] = useState<number[]>([]);\r\n  const [typeChart, setTypeChart] = useState('bar');\r\n\r\n  const addLabelMonth = useCallback((label: string) => {\r\n    const months = label.split(',').map((month: string) => month.trim());\r\n\r\n    setLabelMonths(months);\r\n  }, []);\r\n\r\n  const addValueMonth = useCallback((value: string) => {\r\n    const months: number[] = value.split(',').map((month: string) => Number(month.trim()));\r\n\r\n    if (months.length > labelMonths.length && labelMonths.length > 0) {\r\n      setValueMonths(months.slice(0, labelMonths.length));\r\n    } else {\r\n      setValueMonths(months);\r\n    }\r\n  }, [labelMonths]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <InputsChart\r\n        onLabelMonth={addLabelMonth}\r\n        onValueMonth={addValueMonth}\r\n      />\r\n\r\n      <MonthChart\r\n        labels={labelMonths}\r\n        values={valueMonths}\r\n        typeChart={typeChart}\r\n      />\r\n\r\n      <RadioButtonsChart\r\n        onTypeChart={setTypeChart}\r\n        typeChart={typeChart}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}